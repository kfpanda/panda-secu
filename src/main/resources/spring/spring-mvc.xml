<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	
	<!--<mvc:resources location="/WEB-INF/assets/" mapping="/assets/**"/>
	<mvc:resources location="/WEB-INF/sound/" mapping="/sound/**"/>
	<mvc:resources location="/WEB-INF/image/" mapping="/image/**"/>-->
	<mvc:resources location="/" mapping="/*.html"/>
    <mvc:resources location="/error/" mapping="/error/**" />
	<mvc:resources location="/html/" mapping="/html/**"/>
	<mvc:resources location="/statics/" mapping="/statics/**"/>
	<mvc:default-servlet-handler/>
	<mvc:annotation-driven />

	<!-- 只扫描@Controller注释的类 -->
	<context:component-scan base-package="com.kfpanda.secu" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<aop:config proxy-target-class="true" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<bean id="jsonResultNamingStrategy" class="com.util.common.JsonResultNamingStrategy"></bean>
	<bean id="notNullObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
		<property name="serializationInclusion">
			<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
		</property>
		<property name="propertyNamingStrategy" ref="jsonResultNamingStrategy"></property>
	</bean>
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" >
				<property name="objectMapper" ref="notNullObjectMapper" />
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=utf-8</value>
					</list>
				</property>
			</bean>

			<!-- xml 转化器 如果需要 需要加入相应的jar包 -->
			<!-- 			<bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"> -->
			<!-- 				<constructor-arg ref="jaxbMarshaller" /> -->
			<!-- 				<property name="supportedMediaTypes" value="application/xml;charset=UTF-8" /> -->
			<!-- 			</bean> -->
		</mvc:message-converters>
		<!-- <mvc:argument-resolvers>
			<bean class="com.hexin.core.page.MultPageableArgumentResolver" />
		</mvc:argument-resolvers> -->
	</mvc:annotation-driven>

    <!--<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		&lt;!&ndash; 设置为true以忽略对Accept Header的支持 &ndash;&gt;
	    <property name="ignoreAcceptHeader" value="true" />
	    &lt;!&ndash; 在没有扩展名时即: "/user/1" 时的默认展现形式 &ndash;&gt;
	    <property name="defaultContentType" value="text/html" />
	    
	    &lt;!&ndash; 扩展名至mimeType的映射,即 /user.json => application/json &ndash;&gt;
	    <property name="mediaTypes">
	        <map>
	            <entry key="html" value="text/html"/>
	            <entry key="xml" value="application/xml" />
	            <entry key="json" value="application/json" />
	        </map>
	    </property>
	    &lt;!&ndash; 用于开启 /userinfo/123?format=json 的支持，false为关闭之,我更喜欢.json的方式，因为可以少敲几次键盘 &ndash;&gt;
    	<property name="favorParameter" value="false" />
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass">
						<value>org.springframework.web.servlet.view.InternalResourceView</value>
					</property>
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="objectMapper" ref="notNullObjectMapper" />
				</bean>
			</list>
		</property>
	</bean>-->

	<!-- 定义视图分解器 -->
	<bean id="viewResolver"
		  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView</value>
		</property>
		<!-- 设置前缀，即视图所在的路径 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 设置后缀，即视图的扩展名 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
    <bean id="errorResourceHandler" class="org.springframework.web.servlet.resource.ResourceHttpRequestHandler">
        <property name="locations" value="/error/" />
        <property name="supportedMethods">
            <list>
                <value>GET</value>
                <value>HEAD</value>
                <value>POST</value>
            </list>
        </property>

    </bean>


</beans>
